{"code":"import express from 'express'\nconst app = express()\napp.get('/', (req, res) => {\n  res.send\n})\napp.listen(3000)","nodes":[{"type":"hover","text":"(alias) function express(): Express\n(alias) namespace express\nimport express","docs":"Creates an Express application. The express() function is a top-level function exported by the express module.","start":7,"length":7,"target":"express","line":0,"character":7},{"type":"hover","text":"const app: Express","start":36,"length":3,"target":"app","line":1,"character":6},{"type":"hover","text":"(alias) express(): Express\nimport express","docs":"Creates an Express application. The express() function is a top-level function exported by the express module.","start":42,"length":7,"target":"express","line":1,"character":12},{"type":"hover","text":"const app: Express","start":52,"length":3,"target":"app","line":2,"character":0},{"type":"hover","text":"(property) Application<Record<string, any>>.get: <\"/\", {}, any, any, QueryString.ParsedQs, Record<string, any>>(path: \"/\", ...handlers: RequestHandler<{}, any, any, QueryString.ParsedQs, Record<string, any>>[]) => Express (+5 overloads)","start":56,"length":3,"target":"get","line":2,"character":4},{"type":"hover","text":"(parameter) req: Request<{}, any, any, QueryString.ParsedQs, Record<string, any>>","start":66,"length":3,"target":"req","line":2,"character":14},{"type":"hover","text":"(parameter) res: Response<any, Record<string, any>, number>","start":71,"length":3,"target":"res","line":2,"character":19},{"type":"hover","text":"(parameter) res: Response<any, Record<string, any>, number>","start":83,"length":3,"target":"res","line":3,"character":2},{"type":"hover","text":"(property) Response<any, Record<string, any>, number>.send: Send<any, Response<any, Record<string, any>, number>>","docs":"Send a response.\n\nExamples:\n\n    res.send(new Buffer('wahoo'));\n    res.send({ some: 'json' });\n    res.send('<p>some html</p>');\n    res.status(404).send('Sorry, cant find that');","start":87,"length":4,"target":"send","line":3,"character":6},{"type":"hover","text":"const app: Express","start":95,"length":3,"target":"app","line":5,"character":0},{"type":"hover","text":"(method) Application<Record<string, any>>.listen(port: number, callback?: () => void): Server (+5 overloads)","docs":"Listen for connections.\n\nA node `http.Server` is returned, with this\napplication (which is a `Function`) as its\ncallback. If you wish to create both an HTTP\nand HTTPS server you may do so with the \"http\"\nand \"https\" modules as shown here:\n\n   var http = require('http')\n     , https = require('https')\n     , express = require('express')\n     , app = express();\n\n   http.createServer(app).listen(80);\n   https.createServer({ ... }, app).listen(443);","start":99,"length":6,"target":"listen","line":5,"character":4}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2","path":{}},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2/index.ts","content":"import express from 'express'\nconst app = express()\napp.get('/', (req, res) => {\n  res.send\n})\napp.listen(3000)","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) function express(): Express\n(alias) namespace express\nimport express","docs":"Creates an Express application. The express() function is a top-level function exported by the express module.","start":7,"length":7,"target":"express","line":0,"character":7},{"type":"hover","text":"const app: Express","start":36,"length":3,"target":"app","line":1,"character":6},{"type":"hover","text":"(alias) express(): Express\nimport express","docs":"Creates an Express application. The express() function is a top-level function exported by the express module.","start":42,"length":7,"target":"express","line":1,"character":12},{"type":"hover","text":"const app: Express","start":52,"length":3,"target":"app","line":2,"character":0},{"type":"hover","text":"(property) Application<Record<string, any>>.get: <\"/\", {}, any, any, QueryString.ParsedQs, Record<string, any>>(path: \"/\", ...handlers: RequestHandler<{}, any, any, QueryString.ParsedQs, Record<string, any>>[]) => Express (+5 overloads)","start":56,"length":3,"target":"get","line":2,"character":4},{"type":"hover","text":"(parameter) req: Request<{}, any, any, QueryString.ParsedQs, Record<string, any>>","start":66,"length":3,"target":"req","line":2,"character":14},{"type":"hover","text":"(parameter) res: Response<any, Record<string, any>, number>","start":71,"length":3,"target":"res","line":2,"character":19},{"type":"hover","text":"(parameter) res: Response<any, Record<string, any>, number>","start":83,"length":3,"target":"res","line":3,"character":2},{"type":"hover","text":"(property) Response<any, Record<string, any>, number>.send: Send<any, Response<any, Record<string, any>, number>>","docs":"Send a response.\n\nExamples:\n\n    res.send(new Buffer('wahoo'));\n    res.send({ some: 'json' });\n    res.send('<p>some html</p>');\n    res.status(404).send('Sorry, cant find that');","start":87,"length":4,"target":"send","line":3,"character":6},{"type":"hover","text":"const app: Express","start":95,"length":3,"target":"app","line":5,"character":0},{"type":"hover","text":"(method) Application<Record<string, any>>.listen(port: number, callback?: () => void): Server (+5 overloads)","docs":"Listen for connections.\n\nA node `http.Server` is returned, with this\napplication (which is a `Function`) as its\ncallback. If you wish to create both an HTTP\nand HTTPS server you may do so with the \"http\"\nand \"https\" modules as shown here:\n\n   var http = require('http')\n     , https = require('https')\n     , express = require('express')\n     , app = express();\n\n   http.createServer(app).listen(80);\n   https.createServer({ ... }, app).listen(443);","start":99,"length":6,"target":"listen","line":5,"character":4}],"tags":[]}