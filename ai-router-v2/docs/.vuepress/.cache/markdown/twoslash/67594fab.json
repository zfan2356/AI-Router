{"code":"import process from 'node:process'\nimport { defineUserConfig } from 'vuepress'\nimport { plumeTheme } from 'vuepress-theme-plume'\n\nconst isProd = process.env.NODE_ENV === 'production' // [!code ++]\n\nexport default defineUserConfig({\n  theme: plumeTheme({\n    // 仅在生产环境时启用\n    replaceAssets: isProd ? 'https://cdn.example.com' : false // [!code ++]\n  })\n})","nodes":[{"type":"hover","text":"(alias) var process: NodeJS.Process\nimport process","start":7,"length":7,"target":"process","line":0,"character":7},{"type":"hover","text":"(alias) const defineUserConfig: (config: UserConfig) => UserConfig\nimport defineUserConfig","start":44,"length":16,"target":"defineUserConfig","line":1,"character":9},{"type":"hover","text":"(alias) function plumeTheme(options?: ThemeOptions): Theme\nimport plumeTheme","start":88,"length":10,"target":"plumeTheme","line":2,"character":9},{"type":"hover","text":"const isProd: boolean","start":136,"length":6,"target":"isProd","line":4,"character":6},{"type":"hover","text":"(alias) var process: NodeJS.Process\nimport process","start":145,"length":7,"target":"process","line":4,"character":15},{"type":"hover","text":"(property) NodeJS.Process.env: NodeJS.ProcessEnv","docs":"The `process.env` property returns an object containing the user environment.\nSee [`environ(7)`](http://man7.org/linux/man-pages/man7/environ.7.html).\n\nAn example of this object looks like:\n\n```js\n{\n  TERM: 'xterm-256color',\n  SHELL: '/usr/local/bin/bash',\n  USER: 'maciej',\n  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\n  PWD: '/Users/maciej',\n  EDITOR: 'vim',\n  SHLVL: '1',\n  HOME: '/Users/maciej',\n  LOGNAME: 'maciej',\n  _: '/usr/local/bin/node'\n}\n```\n\nIt is possible to modify this object, but such modifications will not be\nreflected outside the Node.js process, or (unless explicitly requested)\nto other `Worker` threads.\nIn other words, the following example would not work:\n\n```bash\nnode -e 'process.env.foo = \"bar\"' &#x26;&#x26; echo $foo\n```\n\nWhile the following will:\n\n```js\nimport { env } from 'node:process';\n\nenv.foo = 'bar';\nconsole.log(env.foo);\n```\n\nAssigning a property on `process.env` will implicitly convert the value\nto a string. **This behavior is deprecated.** Future versions of Node.js may\nthrow an error when the value is not a string, number, or boolean.\n\n```js\nimport { env } from 'node:process';\n\nenv.test = null;\nconsole.log(env.test);\n// => 'null'\nenv.test = undefined;\nconsole.log(env.test);\n// => 'undefined'\n```\n\nUse `delete` to delete a property from `process.env`.\n\n```js\nimport { env } from 'node:process';\n\nenv.TEST = 1;\ndelete env.TEST;\nconsole.log(env.TEST);\n// => undefined\n```\n\nOn Windows operating systems, environment variables are case-insensitive.\n\n```js\nimport { env } from 'node:process';\n\nenv.TEST = 1;\nconsole.log(env.test);\n// => 1\n```\n\nUnless explicitly specified when creating a `Worker` instance,\neach `Worker` thread has its own copy of `process.env`, based on its\nparent thread's `process.env`, or whatever was specified as the `env` option\nto the `Worker` constructor. Changes to `process.env` will not be visible\nacross `Worker` threads, and only the main thread can make changes that\nare visible to the operating system or to native add-ons. On Windows, a copy of `process.env` on a `Worker` instance operates in a case-sensitive manner\nunlike the main thread.","tags":[["since","v0.1.27"]],"start":153,"length":3,"target":"env","line":4,"character":23},{"type":"hover","text":"string | undefined","start":157,"length":8,"target":"NODE_ENV","line":4,"character":27},{"type":"hover","text":"(alias) defineUserConfig(config: UserConfig): UserConfig\nimport defineUserConfig","start":213,"length":16,"target":"defineUserConfig","line":6,"character":15},{"type":"hover","text":"(property) theme?: Theme | undefined","docs":"Vuepress theme","tags":[["required",null]],"start":234,"length":5,"target":"theme","line":7,"character":2},{"type":"hover","text":"(alias) plumeTheme(options?: ThemeOptions): Theme\nimport plumeTheme","start":241,"length":10,"target":"plumeTheme","line":7,"character":9},{"type":"hover","text":"(property) ThemeFeatureOptions.replaceAssets?: false | ReplaceAssetsPluginOptions | undefined","docs":"资源链接替换","start":275,"length":13,"target":"replaceAssets","line":9,"character":4},{"type":"hover","text":"const isProd: boolean","start":290,"length":6,"target":"isProd","line":9,"character":19}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2","path":{}},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2/index.ts","content":"import process from 'node:process'\nimport { defineUserConfig } from 'vuepress'\nimport { plumeTheme } from 'vuepress-theme-plume'\n\nconst isProd = process.env.NODE_ENV === 'production' // [!code ++]\n\nexport default defineUserConfig({\n  theme: plumeTheme({\n    // 仅在生产环境时启用\n    replaceAssets: isProd ? 'https://cdn.example.com' : false // [!code ++]\n  })\n})","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) var process: NodeJS.Process\nimport process","start":7,"length":7,"target":"process","line":0,"character":7},{"type":"hover","text":"(alias) const defineUserConfig: (config: UserConfig) => UserConfig\nimport defineUserConfig","start":44,"length":16,"target":"defineUserConfig","line":1,"character":9},{"type":"hover","text":"(alias) function plumeTheme(options?: ThemeOptions): Theme\nimport plumeTheme","start":88,"length":10,"target":"plumeTheme","line":2,"character":9},{"type":"hover","text":"const isProd: boolean","start":136,"length":6,"target":"isProd","line":4,"character":6},{"type":"hover","text":"(alias) var process: NodeJS.Process\nimport process","start":145,"length":7,"target":"process","line":4,"character":15},{"type":"hover","text":"(property) NodeJS.Process.env: NodeJS.ProcessEnv","docs":"The `process.env` property returns an object containing the user environment.\nSee [`environ(7)`](http://man7.org/linux/man-pages/man7/environ.7.html).\n\nAn example of this object looks like:\n\n```js\n{\n  TERM: 'xterm-256color',\n  SHELL: '/usr/local/bin/bash',\n  USER: 'maciej',\n  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\n  PWD: '/Users/maciej',\n  EDITOR: 'vim',\n  SHLVL: '1',\n  HOME: '/Users/maciej',\n  LOGNAME: 'maciej',\n  _: '/usr/local/bin/node'\n}\n```\n\nIt is possible to modify this object, but such modifications will not be\nreflected outside the Node.js process, or (unless explicitly requested)\nto other `Worker` threads.\nIn other words, the following example would not work:\n\n```bash\nnode -e 'process.env.foo = \"bar\"' &#x26;&#x26; echo $foo\n```\n\nWhile the following will:\n\n```js\nimport { env } from 'node:process';\n\nenv.foo = 'bar';\nconsole.log(env.foo);\n```\n\nAssigning a property on `process.env` will implicitly convert the value\nto a string. **This behavior is deprecated.** Future versions of Node.js may\nthrow an error when the value is not a string, number, or boolean.\n\n```js\nimport { env } from 'node:process';\n\nenv.test = null;\nconsole.log(env.test);\n// => 'null'\nenv.test = undefined;\nconsole.log(env.test);\n// => 'undefined'\n```\n\nUse `delete` to delete a property from `process.env`.\n\n```js\nimport { env } from 'node:process';\n\nenv.TEST = 1;\ndelete env.TEST;\nconsole.log(env.TEST);\n// => undefined\n```\n\nOn Windows operating systems, environment variables are case-insensitive.\n\n```js\nimport { env } from 'node:process';\n\nenv.TEST = 1;\nconsole.log(env.test);\n// => 1\n```\n\nUnless explicitly specified when creating a `Worker` instance,\neach `Worker` thread has its own copy of `process.env`, based on its\nparent thread's `process.env`, or whatever was specified as the `env` option\nto the `Worker` constructor. Changes to `process.env` will not be visible\nacross `Worker` threads, and only the main thread can make changes that\nare visible to the operating system or to native add-ons. On Windows, a copy of `process.env` on a `Worker` instance operates in a case-sensitive manner\nunlike the main thread.","tags":[["since","v0.1.27"]],"start":153,"length":3,"target":"env","line":4,"character":23},{"type":"hover","text":"string | undefined","start":157,"length":8,"target":"NODE_ENV","line":4,"character":27},{"type":"hover","text":"(alias) defineUserConfig(config: UserConfig): UserConfig\nimport defineUserConfig","start":213,"length":16,"target":"defineUserConfig","line":6,"character":15},{"type":"hover","text":"(property) theme?: Theme | undefined","docs":"Vuepress theme","tags":[["required",null]],"start":234,"length":5,"target":"theme","line":7,"character":2},{"type":"hover","text":"(alias) plumeTheme(options?: ThemeOptions): Theme\nimport plumeTheme","start":241,"length":10,"target":"plumeTheme","line":7,"character":9},{"type":"hover","text":"(property) ThemeFeatureOptions.replaceAssets?: false | ReplaceAssetsPluginOptions | undefined","docs":"资源链接替换","start":275,"length":13,"target":"replaceAssets","line":9,"character":4},{"type":"hover","text":"const isProd: boolean","start":290,"length":6,"target":"isProd","line":9,"character":19}],"tags":[]}