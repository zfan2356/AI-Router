{"code":"interface Todo {\n  title: string\n}\n\nconst todo: Readonly<Todo> = {\n  title: 'Delete inactive users'.toUpperCase(),\n}\n\ntodo.title = 'Hello'\n\nNumber.parseInt('123', 10)\n\n//\n//","nodes":[{"type":"hover","text":"interface Todo","start":10,"length":4,"target":"Todo","line":0,"character":10},{"type":"hover","text":"(property) Todo.title: string","start":19,"length":5,"target":"title","line":1,"character":2},{"type":"hover","text":"const todo: Readonly<Todo>","start":42,"length":4,"target":"todo","line":4,"character":6},{"type":"hover","text":"type Readonly<T> = { readonly [P in keyof T]: T[P]; }","docs":"Make all properties in T readonly","start":48,"length":8,"target":"Readonly","line":4,"character":12},{"type":"hover","text":"interface Todo","start":57,"length":4,"target":"Todo","line":4,"character":21},{"type":"hover","text":"(property) title: string","start":69,"length":5,"target":"title","line":5,"character":2},{"type":"query","text":"(property) title: string","start":69,"length":5,"target":"title","line":5,"character":2},{"type":"hover","text":"(method) String.toUpperCase(): string","docs":"Converts all the alphabetic characters in a string to uppercase.","start":100,"length":11,"target":"toUpperCase","line":5,"character":33},{"type":"hover","text":"const todo: Readonly<Todo>","start":118,"length":4,"target":"todo","line":8,"character":0},{"type":"error","start":123,"length":5,"code":2540,"filename":"index.ts","id":"err-2540-147-5","text":"Cannot assign to 'title' because it is a read-only property.","level":"error","line":8,"character":5},{"type":"hover","text":"(property) title: any","start":123,"length":5,"target":"title","line":8,"character":5},{"type":"hover","text":"var Number: NumberConstructor","docs":"An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers.","start":140,"length":6,"target":"Number","line":10,"character":0},{"type":"hover","text":"(method) NumberConstructor.parseInt(string: string, radix?: number): number","docs":"Converts A string to an integer.","tags":[["param","string A string to convert into a number."],["param","radix A value between 2 and 36 that specifies the base of the number in `string`.\nIf this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\nAll other strings are considered decimal."]],"start":147,"length":8,"target":"parseInt","line":10,"character":7},{"type":"completion","start":148,"length":0,"completions":[{"name":"parseFloat","kind":"method","kindModifiers":"declare","sortText":"11"},{"name":"parseInt","kind":"method","kindModifiers":"declare","sortText":"11"},{"name":"prototype","kind":"property","kindModifiers":"declare","sortText":"11"}],"completionsPrefix":"p","line":10,"character":8}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2","path":{}},"handbookOptions":{"errors":[2540],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[191,202],[132,139],[0,17]],"flagNotations":[{"type":"handbookOptions","name":"errors","value":[2540],"start":0,"end":17}],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2/index.ts","content":"// @errors: 2540\ninterface Todo {\n  title: string\n}\n\nconst todo: Readonly<Todo> = {\n  title: 'Delete inactive users'.toUpperCase(),\n//  ^?\n}\n\ntodo.title = 'Hello'\n\nNumber.parseInt('123', 10)\n//      ^|\n\n//\n//","extension":"ts","supportLsp":true}],"positionQueries":[88],"positionCompletions":[172],"positionHighlights":[]},"queries":[{"type":"query","text":"(property) title: string","start":69,"length":5,"target":"title","line":5,"character":2}],"completions":[{"type":"completion","start":148,"length":0,"completions":[{"name":"parseFloat","kind":"method","kindModifiers":"declare","sortText":"11"},{"name":"parseInt","kind":"method","kindModifiers":"declare","sortText":"11"},{"name":"prototype","kind":"property","kindModifiers":"declare","sortText":"11"}],"completionsPrefix":"p","line":10,"character":8}],"errors":[{"type":"error","start":123,"length":5,"code":2540,"filename":"index.ts","id":"err-2540-147-5","text":"Cannot assign to 'title' because it is a read-only property.","level":"error","line":8,"character":5}],"highlights":[],"hovers":[{"type":"hover","text":"interface Todo","start":10,"length":4,"target":"Todo","line":0,"character":10},{"type":"hover","text":"(property) Todo.title: string","start":19,"length":5,"target":"title","line":1,"character":2},{"type":"hover","text":"const todo: Readonly<Todo>","start":42,"length":4,"target":"todo","line":4,"character":6},{"type":"hover","text":"type Readonly<T> = { readonly [P in keyof T]: T[P]; }","docs":"Make all properties in T readonly","start":48,"length":8,"target":"Readonly","line":4,"character":12},{"type":"hover","text":"interface Todo","start":57,"length":4,"target":"Todo","line":4,"character":21},{"type":"hover","text":"(property) title: string","start":69,"length":5,"target":"title","line":5,"character":2},{"type":"hover","text":"(method) String.toUpperCase(): string","docs":"Converts all the alphabetic characters in a string to uppercase.","start":100,"length":11,"target":"toUpperCase","line":5,"character":33},{"type":"hover","text":"const todo: Readonly<Todo>","start":118,"length":4,"target":"todo","line":8,"character":0},{"type":"hover","text":"(property) title: any","start":123,"length":5,"target":"title","line":8,"character":5},{"type":"hover","text":"var Number: NumberConstructor","docs":"An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers.","start":140,"length":6,"target":"Number","line":10,"character":0},{"type":"hover","text":"(method) NumberConstructor.parseInt(string: string, radix?: number): number","docs":"Converts A string to an integer.","tags":[["param","string A string to convert into a number."],["param","radix A value between 2 and 36 that specifies the base of the number in `string`.\nIf this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\nAll other strings are considered decimal."]],"start":147,"length":8,"target":"parseInt","line":10,"character":7}],"tags":[]}