{"content":"<h2 id=\"一-模板类型推导\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-模板类型推导\"><span>一. 模板类型推导</span></a></h2>\n<p>模板类型推导主要使用以下模板和调用来解释</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">param_type</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">expr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>主要还是几个规则的记忆，具体的底层原理可能在后面的章节会有讲解，对于模板类型推\n导，主要是以下几种模板定义以及三种实参定义的全连接组合</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是ref</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 传入ref会先忽略ref, 然后实参与param type进行模式匹配来决定T</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是ref-to-const</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 传入的实参会忽略const和ref, 然后</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是通用引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 如果expr是左值, T和param type都会被推导为左值引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果expr是右值, 就正常推导</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 形参既不是指针也不是引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 无论传递什么, param都会成为它的一份copy, 同时也会有上面</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则的一些特性, 顶层const会去除</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 30</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: const int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const int, param: const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int&#x26;, param: int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: const int&#x26;, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const int&#x26;, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">29</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: int&#x26;&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> char*</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> const</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ptr </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello, world!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const char*, param: const char*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>另外数组和函数会退化为指针</p>\n<p>总结：</p>\n<ul>\n<li>模板类型推导时，ref实参会去掉ref</li>\n<li>对于通用引用的推导，左值实参会被特殊对待‘</li>\n<li>对于传值类型推导，<code v-pre>const/volatile</code>实参会被认为是<code v-pre>non-const/non volatile</code></li>\n<li>数组或者函数名实参会退化为指针，除非他们被用于初始化引用</li>\n</ul>\n<h2 id=\"二-auto类型推导\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-auto类型推导\"><span>二. auto类型推导</span></a></h2>\n<p>auto类型推导有很多和模板类型推导一致</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 以下一些和模板类型推导一致</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">          // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // const int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref2 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref4 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // int&#x26;&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> char</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name[] </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello, world!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> arr1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // const char*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> arr2 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const char (&#x26;)[14]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是也有一些不同，例如如下的一些x，都会被初始化为int</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> x2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n</div><p>但是auto就不行</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> x2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // std::initializer_list&#x3C;int></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     // std::initializer_list&#x3C;int></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">}</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 无法编译通过</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> initial_list_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">initializer_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> init_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">initial_list_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">}</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 可以正常推导</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>c++14允许auto用于函数返回值并会被推导，而且c++14的lambda函数也允许在形参声明中使\n用auto</p>\n<p>总结：</p>\n<ul>\n<li><code v-pre>auto</code>类型推导通常和模板类型推导相同，但是<code v-pre>auto</code>类型推导假定花括号初始化代\n表<code v-pre>std::initializer_list&lt;int&gt;</code>, 而模板类型推导就不行.</li>\n</ul>\n<h2 id=\"三-decltype\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-decltype\"><span>三. decltype</span></a></h2>\n<p>作用是获取类型</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> i </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">               // decltype(i): const int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">bool</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(s): const std::string&#x26;, decltype(f):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                               // bool(const std::string&#x26;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Point</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(x): int</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">string s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">))</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(f(s)): bool</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">vector</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">12</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(v[0]): int&#x26;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>decltype有一个比较重要的作用就是在模板中标识返回值类型, 但是c++14可以自动推导\nlambda表达式返回值，编译器将会从函数实现中推导出函数的返回类型。</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">])</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>但是在之前的auto推导中我们得知，推导会去掉表达式的引用性ref, 针对我们这个函数而\n言，返回的<code v-pre>c[i]</code> 就无法作为左值来使用，这个时候我们就需要使用decltype</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这个时候我们<code v-pre>c[i]</code> 就可以返回 <code v-pre>T&amp;</code> 类型，当然不光是返回值，在前一部分讨论的auto\n初始化表达式类型推导的地方，也可以使用<code v-pre>decltype(auto)</code> 来&quot;强化&quot;auto的类型推导</p>\n<p>但是这里带来了一些问题，我们通过传递引用的方式传递非常量左值引用，因为返回一个引\n用允许用户来修改容器。这意味着我们无法给函数传递右值容器，因为右值无法绑定到左值\n上，除非是const左值。</p>\n<p>如果我们想让函数接受右值，重载是一个不错的选择</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这里我们并不知道container中的类型是什么，那么对于一个未知对象使用传值通常会造成\n不必要的拷贝，对程序的性能有极大的影响，所以这里可以使用<code v-pre>std::forward()</code>实现通用\n引用，具体的内容将在后面讲解, 但是目前可以知道的是，这样可以保证传入的参数c具有\n之前的左值or右值的特性，避免无意义的拷贝内存开销</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">forward</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>但是decltype也会产生一些意想不到的结果，例如对于左值表达式，decltype就会返回左值\n引用</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  … </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(x）是int，所以f1返回int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype((x))是int&#x26;，所以f2返回int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>显然<code v-pre>f2</code>会导致悬垂引用，引来ub</p>\n","env":{"base":"/","filePath":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2/docs/notes/cpp/type_inference.md","filePathRelative":"notes/cpp/type_inference.md","frontmatter":{"title":"类型推导","author":"zfan","createTime":"2025/04/11 22:07:39","permalink":"/cpp/type/","tags":["cpp"]},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"一-模板类型推导\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-模板类型推导\"><span>一. 模板类型推导</span></a></h2>\n<p>模板类型推导主要使用以下模板和调用来解释</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">param_type</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">expr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>主要还是几个规则的记忆，具体的底层原理可能在后面的章节会有讲解，对于模板类型推\n导，主要是以下几种模板定义以及三种实参定义的全连接组合</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是ref</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 传入ref会先忽略ref, 然后实参与param type进行模式匹配来决定T</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是ref-to-const</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 传入的实参会忽略const和ref, 然后</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是通用引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 如果expr是左值, T和param type都会被推导为左值引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果expr是右值, 就正常推导</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 形参既不是指针也不是引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 无论传递什么, param都会成为它的一份copy, 同时也会有上面</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则的一些特性, 顶层const会去除</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 30</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: const int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const int, param: const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int&#x26;, param: int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: const int&#x26;, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const int&#x26;, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">29</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: int&#x26;&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> char*</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> const</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ptr </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello, world!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const char*, param: const char*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>另外数组和函数会退化为指针</p>\n<p>总结：</p>\n<ul>\n<li>模板类型推导时，ref实参会去掉ref</li>\n<li>对于通用引用的推导，左值实参会被特殊对待‘</li>\n<li>对于传值类型推导，<code v-pre>const/volatile</code>实参会被认为是<code v-pre>non-const/non volatile</code></li>\n<li>数组或者函数名实参会退化为指针，除非他们被用于初始化引用</li>\n</ul>\n<h2 id=\"二-auto类型推导\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-auto类型推导\"><span>二. auto类型推导</span></a></h2>\n<p>auto类型推导有很多和模板类型推导一致</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 以下一些和模板类型推导一致</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">          // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // const int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref2 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref4 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // int&#x26;&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> char</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name[] </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello, world!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> arr1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // const char*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> arr2 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const char (&#x26;)[14]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是也有一些不同，例如如下的一些x，都会被初始化为int</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> x2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n</div><p>但是auto就不行</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> x2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // std::initializer_list&#x3C;int></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     // std::initializer_list&#x3C;int></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">}</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 无法编译通过</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> initial_list_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">initializer_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> init_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">initial_list_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">}</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 可以正常推导</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>c++14允许auto用于函数返回值并会被推导，而且c++14的lambda函数也允许在形参声明中使\n用auto</p>\n<p>总结：</p>\n<ul>\n<li><code v-pre>auto</code>类型推导通常和模板类型推导相同，但是<code v-pre>auto</code>类型推导假定花括号初始化代\n表<code v-pre>std::initializer_list&lt;int&gt;</code>, 而模板类型推导就不行.</li>\n</ul>\n<h2 id=\"三-decltype\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-decltype\"><span>三. decltype</span></a></h2>\n<p>作用是获取类型</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> i </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">               // decltype(i): const int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">bool</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(s): const std::string&#x26;, decltype(f):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                               // bool(const std::string&#x26;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Point</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(x): int</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">string s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">))</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(f(s)): bool</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">vector</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">12</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(v[0]): int&#x26;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>decltype有一个比较重要的作用就是在模板中标识返回值类型, 但是c++14可以自动推导\nlambda表达式返回值，编译器将会从函数实现中推导出函数的返回类型。</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">])</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>但是在之前的auto推导中我们得知，推导会去掉表达式的引用性ref, 针对我们这个函数而\n言，返回的<code v-pre>c[i]</code> 就无法作为左值来使用，这个时候我们就需要使用decltype</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这个时候我们<code v-pre>c[i]</code> 就可以返回 <code v-pre>T&amp;</code> 类型，当然不光是返回值，在前一部分讨论的auto\n初始化表达式类型推导的地方，也可以使用<code v-pre>decltype(auto)</code> 来&quot;强化&quot;auto的类型推导</p>\n<p>但是这里带来了一些问题，我们通过传递引用的方式传递非常量左值引用，因为返回一个引\n用允许用户来修改容器。这意味着我们无法给函数传递右值容器，因为右值无法绑定到左值\n上，除非是const左值。</p>\n<p>如果我们想让函数接受右值，重载是一个不错的选择</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这里我们并不知道container中的类型是什么，那么对于一个未知对象使用传值通常会造成\n不必要的拷贝，对程序的性能有极大的影响，所以这里可以使用<code v-pre>std::forward()</code>实现通用\n引用，具体的内容将在后面讲解, 但是目前可以知道的是，这样可以保证传入的参数c具有\n之前的左值or右值的特性，避免无意义的拷贝内存开销</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">forward</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>但是decltype也会产生一些意想不到的结果，例如对于左值表达式，decltype就会返回左值\n引用</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  … </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(x）是int，所以f1返回int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype((x))是int&#x26;，所以f2返回int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>显然<code v-pre>f2</code>会导致悬垂引用，引来ub</p>\n</template>","contentStripped":"<h2 id=\"一-模板类型推导\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-模板类型推导\"><span>一. 模板类型推导</span></a></h2>\n<p>模板类型推导主要使用以下模板和调用来解释</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">param_type</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">expr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>主要还是几个规则的记忆，具体的底层原理可能在后面的章节会有讲解，对于模板类型推\n导，主要是以下几种模板定义以及三种实参定义的全连接组合</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是ref</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 传入ref会先忽略ref, 然后实参与param type进行模式匹配来决定T</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是ref-to-const</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 传入的实参会忽略const和ref, 然后</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果形参是通用引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 如果expr是左值, T和param type都会被推导为左值引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 如果expr是右值, 就正常推导</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 形参既不是指针也不是引用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则: 无论传递什么, param都会成为它的一份copy, 同时也会有上面</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 规则的一些特性, 顶层const会去除</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 20</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 30</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: const int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const int, param: const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  const_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: int, param: const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int&#x26;, param: int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: const int&#x26;, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const int&#x26;, param: const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  universal_ref_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">29</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: int&#x26;&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: int, param: int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> char*</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> const</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ptr </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello, world!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // T: const char*, param: const char*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>另外数组和函数会退化为指针</p>\n<p>总结：</p>\n<ul>\n<li>模板类型推导时，ref实参会去掉ref</li>\n<li>对于通用引用的推导，左值实参会被特殊对待‘</li>\n<li>对于传值类型推导，<code v-pre>const/volatile</code>实参会被认为是<code v-pre>non-const/non volatile</code></li>\n<li>数组或者函数名实参会退化为指针，除非他们被用于初始化引用</li>\n</ul>\n<h2 id=\"二-auto类型推导\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-auto类型推导\"><span>二. auto类型推导</span></a></h2>\n<p>auto类型推导有很多和模板类型推导一致</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 以下一些和模板类型推导一致</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">          // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // const int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const int&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref2 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> cx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> crx</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> uref4 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // int&#x26;&#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> char</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name[] </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello, world!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> arr1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // const char*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> arr2 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // const char (&#x26;)[14]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是也有一些不同，例如如下的一些x，都会被初始化为int</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> x2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">27</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n</div><p>但是auto就不行</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x1 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> x2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     // int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x3 </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // std::initializer_list&#x3C;int></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     // std::initializer_list&#x3C;int></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> param</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">}</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 无法编译通过</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> initial_list_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">initializer_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> init_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">initial_list_f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">}</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 可以正常推导</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>c++14允许auto用于函数返回值并会被推导，而且c++14的lambda函数也允许在形参声明中使\n用auto</p>\n<p>总结：</p>\n<ul>\n<li><code v-pre>auto</code>类型推导通常和模板类型推导相同，但是<code v-pre>auto</code>类型推导假定花括号初始化代\n表<code v-pre>std::initializer_list&lt;int&gt;</code>, 而模板类型推导就不行.</li>\n</ul>\n<h2 id=\"三-decltype\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-decltype\"><span>三. decltype</span></a></h2>\n<p>作用是获取类型</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> i </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">               // decltype(i): const int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">bool</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">const</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(s): const std::string&#x26;, decltype(f):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                               // bool(const std::string&#x26;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Point</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(x): int</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">string s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">f</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">))</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(f(s)): bool</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">vector</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">12</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(v[0]): int&#x26;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>decltype有一个比较重要的作用就是在模板中标识返回值类型, 但是c++14可以自动推导\nlambda表达式返回值，编译器将会从函数实现中推导出函数的返回类型。</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">])</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>但是在之前的auto推导中我们得知，推导会去掉表达式的引用性ref, 针对我们这个函数而\n言，返回的<code v-pre>c[i]</code> 就无法作为左值来使用，这个时候我们就需要使用decltype</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这个时候我们<code v-pre>c[i]</code> 就可以返回 <code v-pre>T&amp;</code> 类型，当然不光是返回值，在前一部分讨论的auto\n初始化表达式类型推导的地方，也可以使用<code v-pre>decltype(auto)</code> 来&quot;强化&quot;auto的类型推导</p>\n<p>但是这里带来了一些问题，我们通过传递引用的方式传递非常量左值引用，因为返回一个引\n用允许用户来修改容器。这意味着我们无法给函数传递右值容器，因为右值无法绑定到左值\n上，除非是const左值。</p>\n<p>如果我们想让函数接受右值，重载是一个不错的选择</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>这里我们并不知道container中的类型是什么，那么对于一个未知对象使用传值通常会造成\n不必要的拷贝，对程序的性能有极大的影响，所以这里可以使用<code v-pre>std::forward()</code>实现通用\n引用，具体的内容将在后面讲解, 但是目前可以知道的是，这样可以保证传入的参数c具有\n之前的左值or右值的特性，避免无意义的拷贝内存开销</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Index</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> authAndAccess</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Container</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Index i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">forward</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Container</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">c</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>但是decltype也会产生一些意想不到的结果，例如对于左值表达式，decltype就会返回左值\n引用</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  … </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype(x）是int，所以f1返回int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">decltype</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> f2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // decltype((x))是int&#x26;，所以f2返回int&#x26;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><p>显然<code v-pre>f2</code>会导致悬垂引用，引来ub</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"## 一. 模板类型推导\n\n模板类型推导主要使用以下模板和调用来解释\n\n```cpp\ntemplate <typename T>\nvoid f(param_type param);\n\nf(expr);\n```\n\n主要还是几个规则的记忆，具体的底层原理可能在后面的章节会有讲解，对于模板类型推\n导，主要是以下几种模板定义以及三种实参定义的全连接组合\n\n```cpp\n// 如果形参是ref\n// 规则: 传入ref会先忽略ref, 然后实参与param type进行模式匹配来决定T\ntemplate <typename T>\nvoid ref_f(T& param);\n\n// 如果形参是ref-to-const\n// 规则: 传入的实参会忽略const和ref, 然后\ntemplate <typename T>\nvoid const_ref_f(const T& param);\n\n// 如果形参是通用引用\n// 规则: 如果expr是左值, T和param type都会被推导为左值引用\n// 如果expr是右值, 就正常推导\ntemplate <typename T>\nvoid universal_ref_f(T&& param);\n\n// 形参既不是指针也不是引用\n// 规则: 无论传递什么, param都会成为它的一份copy, 同时也会有上面\n// 规则的一些特性, 顶层const会去除\ntemplate <typename T>\nvoid f(T param);\n\nint main() {\n  int x = 10;\n  const int cx = 20;\n  const int& crx = 30;\n\n  ref_f(x);    // T: int, param: int&\n  ref_f(cx);   // T: const int, param: const int&\n  ref_f(crx);  // T: const int, param: const int&\n\n  const_ref_f(x);    // T: int, param: const int&\n  const_ref_f(cx);   // T: int, param: const int&\n  const_ref_f(crx);  // T: int, param: const int&\n\n  universal_ref_f(x);    // T: int&, param: int&\n  universal_ref_f(cx);   // T: const int&, param: const int&\n  universal_ref_f(crx);  // T: const int&, param: const int&\n  universal_ref_f(29);   // T: int, param: int&&\n\n  f(x);    // T: int, param: int\n  f(cx);   // T: int, param: int\n  f(crx);  // T: int, param: int\n  const char* const ptr = \"hello, world!\";\n  f(ptr);  // T: const char*, param: const char*\n}\n```\n\n另外数组和函数会退化为指针\n\n总结：\n\n- 模板类型推导时，ref实参会去掉ref\n- 对于通用引用的推导，左值实参会被特殊对待‘\n- 对于传值类型推导，`const/volatile`实参会被认为是`non-const/non volatile`\n- 数组或者函数名实参会退化为指针，除非他们被用于初始化引用\n\n## 二. auto类型推导\n\nauto类型推导有很多和模板类型推导一致\n\n```cpp\n// 以下一些和模板类型推导一致\nauto x = 27;          // int\nconst auto cx = x;    // const int\nconst auto& crx = x;  // const int&\n\nauto&& uref1 = x;    // int&\nauto&& uref2 = cx;   // const int&\nauto&& uref3 = crx;  // const int&\nauto&& uref4 = 27;   // int&&\n\nconst char name[] = \"hello, world!\";\nauto arr1 = name;   // const char*\nauto& arr2 = name;  // const char (&)[14]\n```\n\n但是也有一些不同，例如如下的一些x，都会被初始化为int\n\n```cpp\nint x1 = 123;\nint x2(123);\nint x3 = {27};\nint x4{27};\n```\n\n但是auto就不行\n\n```cpp\nauto x1 = 123;    // int\nauto x2(123);     // int\nauto x3 = {123};  // std::initializer_list<int>\nauto x4{123};     // std::initializer_list<int>\n\ntemplate <typename T>\nvoid f(T param);\nf({123});  // 无法编译通过\n\ntemplate <typename T>\nvoid initial_list_f(std::initializer_list<T> init_list);\ninitial_list_f({123});  // 可以正常推导\n```\n\nc++14允许auto用于函数返回值并会被推导，而且c++14的lambda函数也允许在形参声明中使\n用auto\n\n总结：\n\n- `auto`类型推导通常和模板类型推导相同，但是`auto`类型推导假定花括号初始化代\n  表`std::initializer_list<int>`, 而模板类型推导就不行.\n\n## 三. decltype\n\n作用是获取类型\n\n```cpp\nconst int i = 0;               // decltype(i): const int\nbool f(const std::string& s);  // decltype(s): const std::string&, decltype(f):\n                               // bool(const std::string&)\n\nstruct Point {\n  int x, y;\n};  // decltype(x): int\n\nstd::string s;\nif (f(s)) {\n}  // decltype(f(s)): bool\n\nstd::vector<int> v(12);  // decltype(v[0]): int&\n```\n\ndecltype有一个比较重要的作用就是在模板中标识返回值类型, 但是c++14可以自动推导\nlambda表达式返回值，编译器将会从函数实现中推导出函数的返回类型。\n\n```cpp\ntemplate <typename Container, typename Index>\nauto authAndAccess(Container& c, Index i) -> decltype(c[i]) {\n  return c[i];\n}\n```\n\n但是在之前的auto推导中我们得知，推导会去掉表达式的引用性ref, 针对我们这个函数而\n言，返回的`c[i]` 就无法作为左值来使用，这个时候我们就需要使用decltype\n\n```cpp\ntemplate <typename Container, typename Index>\ndecltype(auto) authAndAccess(Container& c, Index i) {\n  return c[i];\n}\n```\n\n这个时候我们`c[i]` 就可以返回 `T&` 类型，当然不光是返回值，在前一部分讨论的auto\n初始化表达式类型推导的地方，也可以使用`decltype(auto)` 来\"强化\"auto的类型推导\n\n但是这里带来了一些问题，我们通过传递引用的方式传递非常量左值引用，因为返回一个引\n用允许用户来修改容器。这意味着我们无法给函数传递右值容器，因为右值无法绑定到左值\n上，除非是const左值。\n\n如果我们想让函数接受右值，重载是一个不错的选择\n\n```cpp\ntemplate <typename Container, typename Index>\ndecltype(auto) authAndAccess(Container& c, Index i) {\n  return c[i];\n}\n\ntemplate <typename Container, typename Index>\ndecltype(auto) authAndAccess(Container&& c, Index i) {\n  return c[i];\n}\n```\n\n这里我们并不知道container中的类型是什么，那么对于一个未知对象使用传值通常会造成\n不必要的拷贝，对程序的性能有极大的影响，所以这里可以使用`std::forward()`实现通用\n引用，具体的内容将在后面讲解, 但是目前可以知道的是，这样可以保证传入的参数c具有\n之前的左值or右值的特性，避免无意义的拷贝内存开销\n\n```cpp\ntemplate <typename Container, typename Index>\ndecltype(auto) authAndAccess(Container&& c, Index i) {\n  return std::forward<Container>(c)(i);\n}\n```\n\n但是decltype也会产生一些意想不到的结果，例如对于左值表达式，decltype就会返回左值\n引用\n\n```cpp\ndecltype(auto) f1() {\n  int x = 0;\n  … return x;  // decltype(x）是int，所以f1返回int\n}\n\ndecltype(auto) f2() {\n  int x = 0;\n  return (x);  // decltype((x))是int&，所以f2返回int&\n}\n```\n\n显然`f2`会导致悬垂引用，引来ub","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":2,"title":"一. 模板类型推导","slug":"一-模板类型推导","link":"#一-模板类型推导","children":[]},{"level":2,"title":"二. auto类型推导","slug":"二-auto类型推导","link":"#二-auto类型推导","children":[]},{"level":2,"title":"三. decltype","slug":"三-decltype","link":"#三-decltype","children":[]}]}}
