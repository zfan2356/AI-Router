{"content":"<h2 id=\"一-右值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-右值\"><span>一. 右值</span></a></h2>\n<ul>\n<li>纯右值</li>\n</ul>\n<p>包含字面值: <code v-pre>1, 2, true</code>, 表达式: <code v-pre>a + b</code>, 以及函数返回的非引用对象:</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">A</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> func</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  A a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><ul>\n<li>将亡值</li>\n</ul>\n<p>返回 <code v-pre>T&amp;&amp;</code> 的函数调用</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">A</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> func</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> A</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> }</span></span></code></pre>\n</div><p>转换为<code v-pre>T&amp;&amp;</code> 的类型转换表达式</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">static_cast&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>以及 <code v-pre>std::move(t)</code></p>\n<p>那么右值引用其实就是对右值的引用，给右值一个续命的“引用”，使得它不会立刻被析构</p>\n<h2 id=\"二-为什么需要move\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-为什么需要move\"><span>二. 为什么需要move</span></a></h2>\n<p>move将当前的值转化为将亡值，然后进行移动构造，避免了拷贝构造带来的性能开销</p>\n<h2 id=\"三-其他\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-其他\"><span>三. 其他</span></a></h2>\n<ol>\n<li>\n<p>万能引用</p>\n</li>\n<li>\n<p>引用折叠</p>\n</li>\n<li>\n<p>完美转发</p>\n</li>\n</ol>\n","env":{"base":"/","filePath":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2/docs/notes/cpp/move.md","filePathRelative":"notes/cpp/move.md","frontmatter":{"title":"move 语义","author":"zfan","createTime":"2025/04/11 22:07:39","permalink":"/cpp/move/","tags":["cpp"]},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"一-右值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-右值\"><span>一. 右值</span></a></h2>\n<ul>\n<li>纯右值</li>\n</ul>\n<p>包含字面值: <code v-pre>1, 2, true</code>, 表达式: <code v-pre>a + b</code>, 以及函数返回的非引用对象:</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">A</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> func</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  A a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><ul>\n<li>将亡值</li>\n</ul>\n<p>返回 <code v-pre>T&amp;&amp;</code> 的函数调用</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">A</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> func</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> A</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> }</span></span></code></pre>\n</div><p>转换为<code v-pre>T&amp;&amp;</code> 的类型转换表达式</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">static_cast&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>以及 <code v-pre>std::move(t)</code></p>\n<p>那么右值引用其实就是对右值的引用，给右值一个续命的“引用”，使得它不会立刻被析构</p>\n<h2 id=\"二-为什么需要move\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-为什么需要move\"><span>二. 为什么需要move</span></a></h2>\n<p>move将当前的值转化为将亡值，然后进行移动构造，避免了拷贝构造带来的性能开销</p>\n<h2 id=\"三-其他\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-其他\"><span>三. 其他</span></a></h2>\n<ol>\n<li>\n<p>万能引用</p>\n</li>\n<li>\n<p>引用折叠</p>\n</li>\n<li>\n<p>完美转发</p>\n</li>\n</ol>\n</template>","contentStripped":"<h2 id=\"一-右值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-右值\"><span>一. 右值</span></a></h2>\n<ul>\n<li>纯右值</li>\n</ul>\n<p>包含字面值: <code v-pre>1, 2, true</code>, 表达式: <code v-pre>a + b</code>, 以及函数返回的非引用对象:</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">A</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> func</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  A a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n</div><ul>\n<li>将亡值</li>\n</ul>\n<p>返回 <code v-pre>T&amp;&amp;</code> 的函数调用</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">A</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> func</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> return</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> A</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> }</span></span></code></pre>\n</div><p>转换为<code v-pre>T&amp;&amp;</code> 的类型转换表达式</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">static_cast&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x26;&#x26;></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>以及 <code v-pre>std::move(t)</code></p>\n<p>那么右值引用其实就是对右值的引用，给右值一个续命的“引用”，使得它不会立刻被析构</p>\n<h2 id=\"二-为什么需要move\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-为什么需要move\"><span>二. 为什么需要move</span></a></h2>\n<p>move将当前的值转化为将亡值，然后进行移动构造，避免了拷贝构造带来的性能开销</p>\n<h2 id=\"三-其他\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-其他\"><span>三. 其他</span></a></h2>\n<ol>\n<li>\n<p>万能引用</p>\n</li>\n<li>\n<p>引用折叠</p>\n</li>\n<li>\n<p>完美转发</p>\n</li>\n</ol>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"## 一. 右值\n\n- 纯右值\n\n包含字面值: `1, 2, true`, 表达式: `a + b`, 以及函数返回的非引用对象:\n\n```cpp\nA func() {\n  A a;\n  return a;\n}\n```\n\n- 将亡值\n\n返回 `T&&` 的函数调用\n\n```cpp\nA&& func() { return A(); }\n```\n\n转换为`T&&` 的类型转换表达式\n\n```cpp\nstatic_cast<T&&>(t);\n```\n\n以及 `std::move(t)`\n\n那么右值引用其实就是对右值的引用，给右值一个续命的“引用”，使得它不会立刻被析构\n\n## 二. 为什么需要move\n\nmove将当前的值转化为将亡值，然后进行移动构造，避免了拷贝构造带来的性能开销\n\n## 三. 其他\n\n1. 万能引用\n\n2. 引用折叠\n\n3. 完美转发","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":2,"title":"一. 右值","slug":"一-右值","link":"#一-右值","children":[]},{"level":2,"title":"二. 为什么需要move","slug":"二-为什么需要move","link":"#二-为什么需要move","children":[]},{"level":2,"title":"三. 其他","slug":"三-其他","link":"#三-其他","children":[]}]}}
