{"content":"<h2 id=\"一-初始化\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-初始化\"><span>一. <code v-pre>{}</code> 初始化</span></a></h2>\n<p><code v-pre>{}</code> 初始化具有如下的好处</p>\n<ul>\n<li>\n<p>可以指定容器的初始元素，例如<code v-pre>std::vector&lt;int&gt; v{1, 2, 3};</code></p>\n</li>\n<li>\n<p>可以用于为非静态数据成员指定默认初始值</p>\n</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // error</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n</div><ul>\n<li>\n<p>一些不可拷贝对象(<code v-pre>std::atomic</code> ...) 可以使用<code v-pre>{}</code> 来初始化</p>\n</li>\n<li>\n<p>最重要的一点，<code v-pre>{}</code>初始化<strong>不允许内置类型间隐式的变窄转换</strong></p>\n</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">double</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ERROR</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> t2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">x</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> +</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> y</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> +</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><ul>\n<li>对于<strong>解析问题</strong> (most vexing parse) 有天然的免疫性，因为在c++中有规定，任何可\n以被解析为declaration的东西就必须解析为declaration，这就会使得以下的语句只能被\n解析为函数声明:</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">    10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 可以理解为w2函数declaration，也可以理解为definition，定义w2对象</span></span></code></pre>\n</div><p>这时使用 <code v-pre>{}</code> 会有天然的优势</p>\n<hr>\n<p><code v-pre>()</code> 初始化的好处</p>\n<ul>\n<li>可以避免 <code v-pre>{}</code> 初始化对于 <code v-pre>std::initializer_list</code> 构造函数的调用</li>\n</ul>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> bool</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> d</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以看出，如果正常的构造函数, <code v-pre>{}</code> 和 <code v-pre>()</code> 产生的效果是相同的</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> bool</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> d</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">initializer_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">long</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> il</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 3</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code v-pre>w2</code> 和 <code v-pre>w4</code> 会使用新添加的构造函数，即使其他的构造函数更匹配，这个时候会发生类\n型转换，10, true, 1,1都会被转化为 long double。</p>\n<p>甚至普通构造函数和移动构造函数也会被劫持，这里类比vector就可以理解</p>\n<h2 id=\"二-nullptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-nullptr\"><span>二. <code v-pre>nullptr</code></span></a></h2>\n<p>我们在定义空指针的时候，尽量使用nullptr, 因为0和NULL会被推断为int和整形，这在函\n数重载，或者模板类型推导的时候容易发生错误，对于nullptr，会被推导为\nstd::nullptr_t, 这个类型可以隐式地转化为指向任何内置类型的指针</p>\n<h2 id=\"三-using\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-using\"><span>三. <code v-pre>using</code></span></a></h2>\n<p>尽量使用using, using有一个吸引人的特性，别名声明可以模板化，但是typedef不行。这\n样我们在使用模板的时候，会遇到很多复杂的表述</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAllocList</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAlloc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>>;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">MyAllocList</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">MyStruct</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> lw</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  typedef</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">list</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> MyAlloc</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">MyStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">type lw1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> ListStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  MyAllocList</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ls</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> ListStruct1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ls</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"四-scoped-enum\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#四-scoped-enum\"><span>四. scoped enum</span></a></h2>\n<p>我们要优先使用限域enum，作用有如下</p>\n<ul>\n<li>\n<p>可以减少命名污染</p>\n</li>\n<li>\n<p>在其作用域中，枚举名是强类型</p>\n</li>\n<li>\n<p>可以被前置声明; 这是因为cpp会为每个enum选择一个底层的类型用来表示它，通常会选\n择可以表示这个enum的最小类型，但是并不总是这样，所以c++98的不限域enum总是要求\n定义，而不是声明，这样可以使得编译器选取最小的类型来表示这个枚举。但是不声明的\n话，总是不方便的，如果改变了定义，会引起整个系统重新编译。如果我们使用限域enum\n来进行声明的话，即使cpp文件中的定义发生改变，也不会使得头文件跟着重新编\n译，c++11解决类型推断的方法是，给定一个默认类型int，我们也可以重写他来制定enum\n的类型</p>\n</li>\n</ul>\n<p>限域enum避免了命名空间污染，不接受荒谬的隐式类型转换</p>\n<p>现在假设有一个需求，我需要保存用户的三种属性，那么我们通常会使用tuple将其存起\n来，但是对于取值的时候，我们需要通过1，2，3这样的标号访问，这样对于值的语义并不\n直观</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">tuple</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">size_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">UserInfo user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>这个时候有一个比较好用的方法，就是通过enum将名字和字段编号关联起来以避免上述按标\n号的晦涩访问，那么我们就有了限域和非限域两种写法</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfoFields1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiEmail</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiReputation</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfoFields2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiEmail</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiReputation</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于第二种，我们可以通过下面的方法来访问数据，原理就是其中的枚举名被隐式转换为\n了<code v-pre>std::size_t</code>, 其中<code v-pre>std::size_t</code>是<code v-pre>std::get</code>模板实参所需要的</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>但是对于第一种，我们如果要访问的话，就会较为冗余，其实就是因为限域enum无法进行隐\n式的类型转换</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">static_cast</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">size_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">UserInfoFields1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiEmail</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span></code></pre>\n</div><p>我们可以实现一个<code v-pre>constexpr</code>函数，在编译器生效，将其类型转化为<code v-pre>std::size_t</code>, 但是\n更一般化地，我们可以直接返回这个枚举的底层类型</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// std::underlying_type用于获取枚举类型的底层数据类型, 要求枚举已定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">underlying_type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    E enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">underlying_type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// cpp14</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">E</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// auto 返回类型推导</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">E</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 限域写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">toUType</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">UserInfoFields</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiEmail</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">uInfo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"五-deleted\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#五-deleted\"><span>五. deleted</span></a></h2>\n<p>我们想要将一个函数标记为无法使用，在c++98中会将其标记为<code v-pre>private</code>, 但是这样存在诸\n多局限性，使用<code v-pre>deleted</code> 会有更好的效果</p>\n<ul>\n<li>\n<p>任何函数都可以标记为<code v-pre>deleted</code>，而只有成员函数可被标记为<code v-pre>private</code></p>\n</li>\n<li>\n<p><code v-pre>deleted</code> 可以禁止一些模板的实例化</p>\n</li>\n<li>\n<p>deleted函数不能以任何方式被调用，即使你在成员函数或者友元函数里面调用deleted函\n数也不能通过编译。可以在编译期检测出来，而不是链接期</p>\n</li>\n</ul>\n<h2 id=\"六-override-noexcept\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#六-override-noexcept\"><span>六. override/noexcept</span></a></h2>\n<p>由于cpp中的继承重写有诸多限制，所以对于派生类的函数重写，最好加上<code v-pre>override</code>，便\n于编译器检查, <code v-pre>noexcept</code>也是同理，可以给我们带来更小的开销，尤其是作用于拷贝移动\n赋值，以及构造析构函数的时候，建议将其声明为 <code v-pre>noexcept</code></p>\n<h2 id=\"七-constexpr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#七-constexpr\"><span>七. constexpr</span></a></h2>\n<p>constexpr可以将一部分在运行时进行的计算转移到编译时进行，这样会给我们的代码带来\n更快的运行效率，所以我们应当尽可能地在代码中应用constexpr</p>\n<h2 id=\"八-const成员函数的线程安全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#八-const成员函数的线程安全\"><span>八. const成员函数的线程安全</span></a></h2>\n<p>在cpp中，const成员函数无法修改成员变量，这是const语义保证的，但是经由mutable修饰\n的成员变量，是可以被const成员函数改变的，这样的话，本身const成员函数就肩负着的线\n程安全的逻辑意义，就被破坏，所以我们需要人为的去使用mutex等同步原语来保证const线\n程安全</p>\n<h2 id=\"九-特殊成员函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#九-特殊成员函数\"><span>九. 特殊成员函数</span></a></h2>\n<p>特殊成员函数有六个，指的是cpp会自己生成的函数，注意这些函数签名是写死的，不能随\n意更改传入的参数和返回值的type</p>\n<p>如果没有显式声明，他们会在需要的时候才会自动生成。</p>\n","env":{"base":"/","filePath":"/Users/zhangfan/zfan2356/github/AI-Router/ai-router-v2/docs/notes/cpp/modern_cpp_features.md","filePathRelative":"notes/cpp/modern_cpp_features.md","frontmatter":{"title":"现代cpp的一些特性","author":"zfan","createTime":"2025/04/11 22:07:39","permalink":"/cpp/modern/","tags":["cpp"]},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"一-初始化\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-初始化\"><span>一. <code v-pre>{}</code> 初始化</span></a></h2>\n<p><code v-pre>{}</code> 初始化具有如下的好处</p>\n<ul>\n<li>\n<p>可以指定容器的初始元素，例如<code v-pre>std::vector&lt;int&gt; v{1, 2, 3};</code></p>\n</li>\n<li>\n<p>可以用于为非静态数据成员指定默认初始值</p>\n</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // error</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n</div><ul>\n<li>\n<p>一些不可拷贝对象(<code v-pre>std::atomic</code> ...) 可以使用<code v-pre>{}</code> 来初始化</p>\n</li>\n<li>\n<p>最重要的一点，<code v-pre>{}</code>初始化<strong>不允许内置类型间隐式的变窄转换</strong></p>\n</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">double</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ERROR</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> t2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">x</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> +</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> y</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> +</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><ul>\n<li>对于<strong>解析问题</strong> (most vexing parse) 有天然的免疫性，因为在c++中有规定，任何可\n以被解析为declaration的东西就必须解析为declaration，这就会使得以下的语句只能被\n解析为函数声明:</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">    10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 可以理解为w2函数declaration，也可以理解为definition，定义w2对象</span></span></code></pre>\n</div><p>这时使用 <code v-pre>{}</code> 会有天然的优势</p>\n<hr>\n<p><code v-pre>()</code> 初始化的好处</p>\n<ul>\n<li>可以避免 <code v-pre>{}</code> 初始化对于 <code v-pre>std::initializer_list</code> 构造函数的调用</li>\n</ul>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> bool</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> d</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以看出，如果正常的构造函数, <code v-pre>{}</code> 和 <code v-pre>()</code> 产生的效果是相同的</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> bool</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> d</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">initializer_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">long</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> il</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 3</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code v-pre>w2</code> 和 <code v-pre>w4</code> 会使用新添加的构造函数，即使其他的构造函数更匹配，这个时候会发生类\n型转换，10, true, 1,1都会被转化为 long double。</p>\n<p>甚至普通构造函数和移动构造函数也会被劫持，这里类比vector就可以理解</p>\n<h2 id=\"二-nullptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-nullptr\"><span>二. <code v-pre>nullptr</code></span></a></h2>\n<p>我们在定义空指针的时候，尽量使用nullptr, 因为0和NULL会被推断为int和整形，这在函\n数重载，或者模板类型推导的时候容易发生错误，对于nullptr，会被推导为\nstd::nullptr_t, 这个类型可以隐式地转化为指向任何内置类型的指针</p>\n<h2 id=\"三-using\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-using\"><span>三. <code v-pre>using</code></span></a></h2>\n<p>尽量使用using, using有一个吸引人的特性，别名声明可以模板化，但是typedef不行。这\n样我们在使用模板的时候，会遇到很多复杂的表述</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAllocList</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAlloc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>>;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">MyAllocList</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">MyStruct</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> lw</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  typedef</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">list</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> MyAlloc</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">MyStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">type lw1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> ListStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  MyAllocList</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ls</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> ListStruct1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ls</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"四-scoped-enum\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#四-scoped-enum\"><span>四. scoped enum</span></a></h2>\n<p>我们要优先使用限域enum，作用有如下</p>\n<ul>\n<li>\n<p>可以减少命名污染</p>\n</li>\n<li>\n<p>在其作用域中，枚举名是强类型</p>\n</li>\n<li>\n<p>可以被前置声明; 这是因为cpp会为每个enum选择一个底层的类型用来表示它，通常会选\n择可以表示这个enum的最小类型，但是并不总是这样，所以c++98的不限域enum总是要求\n定义，而不是声明，这样可以使得编译器选取最小的类型来表示这个枚举。但是不声明的\n话，总是不方便的，如果改变了定义，会引起整个系统重新编译。如果我们使用限域enum\n来进行声明的话，即使cpp文件中的定义发生改变，也不会使得头文件跟着重新编\n译，c++11解决类型推断的方法是，给定一个默认类型int，我们也可以重写他来制定enum\n的类型</p>\n</li>\n</ul>\n<p>限域enum避免了命名空间污染，不接受荒谬的隐式类型转换</p>\n<p>现在假设有一个需求，我需要保存用户的三种属性，那么我们通常会使用tuple将其存起\n来，但是对于取值的时候，我们需要通过1，2，3这样的标号访问，这样对于值的语义并不\n直观</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">tuple</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">size_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">UserInfo user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>这个时候有一个比较好用的方法，就是通过enum将名字和字段编号关联起来以避免上述按标\n号的晦涩访问，那么我们就有了限域和非限域两种写法</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfoFields1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiEmail</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiReputation</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfoFields2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiEmail</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiReputation</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于第二种，我们可以通过下面的方法来访问数据，原理就是其中的枚举名被隐式转换为\n了<code v-pre>std::size_t</code>, 其中<code v-pre>std::size_t</code>是<code v-pre>std::get</code>模板实参所需要的</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>但是对于第一种，我们如果要访问的话，就会较为冗余，其实就是因为限域enum无法进行隐\n式的类型转换</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">static_cast</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">size_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">UserInfoFields1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiEmail</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span></code></pre>\n</div><p>我们可以实现一个<code v-pre>constexpr</code>函数，在编译器生效，将其类型转化为<code v-pre>std::size_t</code>, 但是\n更一般化地，我们可以直接返回这个枚举的底层类型</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// std::underlying_type用于获取枚举类型的底层数据类型, 要求枚举已定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">underlying_type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    E enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">underlying_type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// cpp14</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">E</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// auto 返回类型推导</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">E</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 限域写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">toUType</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">UserInfoFields</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiEmail</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">uInfo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"五-deleted\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#五-deleted\"><span>五. deleted</span></a></h2>\n<p>我们想要将一个函数标记为无法使用，在c++98中会将其标记为<code v-pre>private</code>, 但是这样存在诸\n多局限性，使用<code v-pre>deleted</code> 会有更好的效果</p>\n<ul>\n<li>\n<p>任何函数都可以标记为<code v-pre>deleted</code>，而只有成员函数可被标记为<code v-pre>private</code></p>\n</li>\n<li>\n<p><code v-pre>deleted</code> 可以禁止一些模板的实例化</p>\n</li>\n<li>\n<p>deleted函数不能以任何方式被调用，即使你在成员函数或者友元函数里面调用deleted函\n数也不能通过编译。可以在编译期检测出来，而不是链接期</p>\n</li>\n</ul>\n<h2 id=\"六-override-noexcept\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#六-override-noexcept\"><span>六. override/noexcept</span></a></h2>\n<p>由于cpp中的继承重写有诸多限制，所以对于派生类的函数重写，最好加上<code v-pre>override</code>，便\n于编译器检查, <code v-pre>noexcept</code>也是同理，可以给我们带来更小的开销，尤其是作用于拷贝移动\n赋值，以及构造析构函数的时候，建议将其声明为 <code v-pre>noexcept</code></p>\n<h2 id=\"七-constexpr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#七-constexpr\"><span>七. constexpr</span></a></h2>\n<p>constexpr可以将一部分在运行时进行的计算转移到编译时进行，这样会给我们的代码带来\n更快的运行效率，所以我们应当尽可能地在代码中应用constexpr</p>\n<h2 id=\"八-const成员函数的线程安全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#八-const成员函数的线程安全\"><span>八. const成员函数的线程安全</span></a></h2>\n<p>在cpp中，const成员函数无法修改成员变量，这是const语义保证的，但是经由mutable修饰\n的成员变量，是可以被const成员函数改变的，这样的话，本身const成员函数就肩负着的线\n程安全的逻辑意义，就被破坏，所以我们需要人为的去使用mutex等同步原语来保证const线\n程安全</p>\n<h2 id=\"九-特殊成员函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#九-特殊成员函数\"><span>九. 特殊成员函数</span></a></h2>\n<p>特殊成员函数有六个，指的是cpp会自己生成的函数，注意这些函数签名是写死的，不能随\n意更改传入的参数和返回值的type</p>\n<p>如果没有显式声明，他们会在需要的时候才会自动生成。</p>\n</template>","contentStripped":"<h2 id=\"一-初始化\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一-初始化\"><span>一. <code v-pre>{}</code> 初始化</span></a></h2>\n<p><code v-pre>{}</code> 初始化具有如下的好处</p>\n<ul>\n<li>\n<p>可以指定容器的初始元素，例如<code v-pre>std::vector&lt;int&gt; v{1, 2, 3};</code></p>\n</li>\n<li>\n<p>可以用于为非静态数据成员指定默认初始值</p>\n</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // error</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n</div><ul>\n<li>\n<p>一些不可拷贝对象(<code v-pre>std::atomic</code> ...) 可以使用<code v-pre>{}</code> 来初始化</p>\n</li>\n<li>\n<p>最重要的一点，<code v-pre>{}</code>初始化<strong>不允许内置类型间隐式的变窄转换</strong></p>\n</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">double</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> x</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">x </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> y </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ERROR</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> t2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">x</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> +</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> y</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> +</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> z</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><ul>\n<li>对于<strong>解析问题</strong> (most vexing parse) 有天然的免疫性，因为在c++中有规定，任何可\n以被解析为declaration的东西就必须解析为declaration，这就会使得以下的语句只能被\n解析为函数声明:</li>\n</ul>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">    10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 可以理解为w2函数declaration，也可以理解为definition，定义w2对象</span></span></code></pre>\n</div><p>这时使用 <code v-pre>{}</code> 会有天然的优势</p>\n<hr>\n<p><code v-pre>()</code> 初始化的好处</p>\n<ul>\n<li>可以避免 <code v-pre>{}</code> 初始化对于 <code v-pre>std::initializer_list</code> 构造函数的调用</li>\n</ul>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> bool</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> d</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以看出，如果正常的构造函数, <code v-pre>{}</code> 和 <code v-pre>()</code> 产生的效果是相同的</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> bool</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> i</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> d</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Widget</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">initializer_list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">long</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> double</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> il</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Widget</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> w3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Widget w4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">10</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 1.1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">   // 3</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code v-pre>w2</code> 和 <code v-pre>w4</code> 会使用新添加的构造函数，即使其他的构造函数更匹配，这个时候会发生类\n型转换，10, true, 1,1都会被转化为 long double。</p>\n<p>甚至普通构造函数和移动构造函数也会被劫持，这里类比vector就可以理解</p>\n<h2 id=\"二-nullptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二-nullptr\"><span>二. <code v-pre>nullptr</code></span></a></h2>\n<p>我们在定义空指针的时候，尽量使用nullptr, 因为0和NULL会被推断为int和整形，这在函\n数重载，或者模板类型推导的时候容易发生错误，对于nullptr，会被推导为\nstd::nullptr_t, 这个类型可以隐式地转化为指向任何内置类型的指针</p>\n<h2 id=\"三-using\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三-using\"><span>三. <code v-pre>using</code></span></a></h2>\n<p>尽量使用using, using有一个吸引人的特性，别名声明可以模板化，但是typedef不行。这\n样我们在使用模板的时候，会遇到很多复杂的表述</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAllocList</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">list</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAlloc</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>>;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">MyAllocList</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">MyStruct</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> lw</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  typedef</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">list</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> MyAlloc</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">MyStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">type lw1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> ListStruct</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  MyAllocList</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ls</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">struct</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> ListStruct1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">  typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> MyAllocList1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> ls</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"四-scoped-enum\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#四-scoped-enum\"><span>四. scoped enum</span></a></h2>\n<p>我们要优先使用限域enum，作用有如下</p>\n<ul>\n<li>\n<p>可以减少命名污染</p>\n</li>\n<li>\n<p>在其作用域中，枚举名是强类型</p>\n</li>\n<li>\n<p>可以被前置声明; 这是因为cpp会为每个enum选择一个底层的类型用来表示它，通常会选\n择可以表示这个enum的最小类型，但是并不总是这样，所以c++98的不限域enum总是要求\n定义，而不是声明，这样可以使得编译器选取最小的类型来表示这个枚举。但是不声明的\n话，总是不方便的，如果改变了定义，会引起整个系统重新编译。如果我们使用限域enum\n来进行声明的话，即使cpp文件中的定义发生改变，也不会使得头文件跟着重新编\n译，c++11解决类型推断的方法是，给定一个默认类型int，我们也可以重写他来制定enum\n的类型</p>\n</li>\n</ul>\n<p>限域enum避免了命名空间污染，不接受荒谬的隐式类型转换</p>\n<p>现在假设有一个需求，我需要保存用户的三种属性，那么我们通常会使用tuple将其存起\n来，但是对于取值的时候，我们需要通过1，2，3这样的标号访问，这样对于值的语义并不\n直观</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">tuple</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">string</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">size_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">UserInfo user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>这个时候有一个比较好用的方法，就是通过enum将名字和字段编号关联起来以避免上述按标\n号的晦涩访问，那么我们就有了限域和非限域两种写法</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfoFields1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiEmail</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiReputation</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> UserInfoFields2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiEmail</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  uiReputation</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于第二种，我们可以通过下面的方法来访问数据，原理就是其中的枚举名被隐式转换为\n了<code v-pre>std::size_t</code>, 其中<code v-pre>std::size_t</code>是<code v-pre>std::get</code>模板实参所需要的</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiName</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n</div><p>但是对于第一种，我们如果要访问的话，就会较为冗余，其实就是因为限域enum无法进行隐\n式的类型转换</p>\n<div class=\"language-cpp\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">static_cast</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">size_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">UserInfoFields1</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiEmail</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">user</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span></code></pre>\n</div><p>我们可以实现一个<code v-pre>constexpr</code>函数，在编译器生效，将其类型转化为<code v-pre>std::size_t</code>, 但是\n更一般化地，我们可以直接返回这个枚举的底层类型</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// std::underlying_type用于获取枚举类型的底层数据类型, 要求枚举已定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">underlying_type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    E enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;typename</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">underlying_type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">type</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// cpp14</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">E</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// auto 返回类型推导</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">template</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">typename</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> E</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">constexpr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> auto</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> toUType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">E</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> noexcept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">  return</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static_cast&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">underlying_type_t</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">E</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">>></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">enumerator</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 限域写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">auto</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> val </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">toUType</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">UserInfoFields</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">uiEmail</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">uInfo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"五-deleted\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#五-deleted\"><span>五. deleted</span></a></h2>\n<p>我们想要将一个函数标记为无法使用，在c++98中会将其标记为<code v-pre>private</code>, 但是这样存在诸\n多局限性，使用<code v-pre>deleted</code> 会有更好的效果</p>\n<ul>\n<li>\n<p>任何函数都可以标记为<code v-pre>deleted</code>，而只有成员函数可被标记为<code v-pre>private</code></p>\n</li>\n<li>\n<p><code v-pre>deleted</code> 可以禁止一些模板的实例化</p>\n</li>\n<li>\n<p>deleted函数不能以任何方式被调用，即使你在成员函数或者友元函数里面调用deleted函\n数也不能通过编译。可以在编译期检测出来，而不是链接期</p>\n</li>\n</ul>\n<h2 id=\"六-override-noexcept\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#六-override-noexcept\"><span>六. override/noexcept</span></a></h2>\n<p>由于cpp中的继承重写有诸多限制，所以对于派生类的函数重写，最好加上<code v-pre>override</code>，便\n于编译器检查, <code v-pre>noexcept</code>也是同理，可以给我们带来更小的开销，尤其是作用于拷贝移动\n赋值，以及构造析构函数的时候，建议将其声明为 <code v-pre>noexcept</code></p>\n<h2 id=\"七-constexpr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#七-constexpr\"><span>七. constexpr</span></a></h2>\n<p>constexpr可以将一部分在运行时进行的计算转移到编译时进行，这样会给我们的代码带来\n更快的运行效率，所以我们应当尽可能地在代码中应用constexpr</p>\n<h2 id=\"八-const成员函数的线程安全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#八-const成员函数的线程安全\"><span>八. const成员函数的线程安全</span></a></h2>\n<p>在cpp中，const成员函数无法修改成员变量，这是const语义保证的，但是经由mutable修饰\n的成员变量，是可以被const成员函数改变的，这样的话，本身const成员函数就肩负着的线\n程安全的逻辑意义，就被破坏，所以我们需要人为的去使用mutex等同步原语来保证const线\n程安全</p>\n<h2 id=\"九-特殊成员函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#九-特殊成员函数\"><span>九. 特殊成员函数</span></a></h2>\n<p>特殊成员函数有六个，指的是cpp会自己生成的函数，注意这些函数签名是写死的，不能随\n意更改传入的参数和返回值的type</p>\n<p>如果没有显式声明，他们会在需要的时候才会自动生成。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"## 一. `{}` 初始化\n\n`{}` 初始化具有如下的好处\n\n- 可以指定容器的初始元素，例如`std::vector<int> v{1, 2, 3};`\n\n- 可以用于为非静态数据成员指定默认初始值\n\n```cpp\nclass Widget {\n private:\n  int x{0};\n  int y = 0;\n  int z(0);  // error\n};\n```\n\n- 一些不可拷贝对象(`std::atomic` ...) 可以使用`{}` 来初始化\n\n- 最重要的一点，`{}`初始化**不允许内置类型间隐式的变窄转换**\n\n```cpp\ndouble x, y, z;\n\nint t1{x + y + z};  // ERROR\nint t2(x + y + z);\n```\n\n- 对于**解析问题** (most vexing parse) 有天然的免疫性，因为在c++中有规定，任何可\n  以被解析为declaration的东西就必须解析为declaration，这就会使得以下的语句只能被\n  解析为函数声明:\n\n```cpp\nWidget w1(\n    10);  // 可以理解为w2函数declaration，也可以理解为definition，定义w2对象\n```\n\n这时使用 `{}` 会有天然的优势\n\n---\n\n`()` 初始化的好处\n\n- 可以避免 `{}` 初始化对于 `std::initializer_list` 构造函数的调用\n\n```cpp\nclass Widget {\n public:\n  Widget(int i, bool b);\n  Widget(int i, double d);\n};\n\nWidget w1(10, true);  // 1\nWidget w2{10, true};  // 1\nWidget w3(10, 1.1);   // 2\nWidget w4{10, 1.1};   // 2\n```\n\n可以看出，如果正常的构造函数, `{}` 和 `()` 产生的效果是相同的\n\n```cpp\nclass Widget {\n public:\n  Widget(int i, bool b);\n  Widget(int i, double d);\n  Widget(std::initializer_list<long double> il);\n};\n\nWidget w1(10, true);  // 1\nWidget w2{10, true};  // 3\nWidget w3(10, 1.1);   // 2\nWidget w4{10, 1.1};   // 3\n```\n\n`w2` 和 `w4` 会使用新添加的构造函数，即使其他的构造函数更匹配，这个时候会发生类\n型转换，10, true, 1,1都会被转化为 long double。\n\n甚至普通构造函数和移动构造函数也会被劫持，这里类比vector就可以理解\n\n## 二. `nullptr`\n\n我们在定义空指针的时候，尽量使用nullptr, 因为0和NULL会被推断为int和整形，这在函\n数重载，或者模板类型推导的时候容易发生错误，对于nullptr，会被推导为\nstd::nullptr_t, 这个类型可以隐式地转化为指向任何内置类型的指针\n\n## 三. `using`\n\n尽量使用using, using有一个吸引人的特性，别名声明可以模板化，但是typedef不行。这\n样我们在使用模板的时候，会遇到很多复杂的表述\n\n```cpp\nstruct MyStruct {};\n\ntemplate <typename T>\nusing MyAllocList = std::list<T, MyAlloc<T>>;\nMyAllocList<MyStruct> lw;\n\ntemplate <typename T>\nstruct MyAllocList1 {\n  typedef std::list<T, MyAlloc<T>> type;\n};\n\nMyAllocList1<MyStruct>::type lw1;\n\ntemplate <typename T>\nstruct ListStruct {\n  MyAllocList<T> ls;\n};\n\ntemplate <typename T>\nstruct ListStruct1 {\n  typename MyAllocList1<T>::type ls;\n};\n```\n\n## 四. scoped enum\n\n我们要优先使用限域enum，作用有如下\n\n- 可以减少命名污染\n\n- 在其作用域中，枚举名是强类型\n\n- 可以被前置声明; 这是因为cpp会为每个enum选择一个底层的类型用来表示它，通常会选\n  择可以表示这个enum的最小类型，但是并不总是这样，所以c++98的不限域enum总是要求\n  定义，而不是声明，这样可以使得编译器选取最小的类型来表示这个枚举。但是不声明的\n  话，总是不方便的，如果改变了定义，会引起整个系统重新编译。如果我们使用限域enum\n  来进行声明的话，即使cpp文件中的定义发生改变，也不会使得头文件跟着重新编\n  译，c++11解决类型推断的方法是，给定一个默认类型int，我们也可以重写他来制定enum\n  的类型\n\n限域enum避免了命名空间污染，不接受荒谬的隐式类型转换\n\n现在假设有一个需求，我需要保存用户的三种属性，那么我们通常会使用tuple将其存起\n来，但是对于取值的时候，我们需要通过1，2，3这样的标号访问，这样对于值的语义并不\n直观\n\n```cpp\nusing UserInfo = std::tuple<std::string, std::string, std::size_t>;\n\nUserInfo user;\nauto val = std::get<1>(user);\n```\n\n这个时候有一个比较好用的方法，就是通过enum将名字和字段编号关联起来以避免上述按标\n号的晦涩访问，那么我们就有了限域和非限域两种写法\n\n```cpp\n// 1\nenum class UserInfoFields1 {\n  uiName,\n  uiEmail,\n  uiReputation,\n};\n\n// 2\nenum UserInfoFields2 {\n  uiName,\n  uiEmail,\n  uiReputation,\n};\n```\n\n对于第二种，我们可以通过下面的方法来访问数据，原理就是其中的枚举名被隐式转换为\n了`std::size_t`, 其中`std::size_t`是`std::get`模板实参所需要的\n\n```cpp\nauto val = std::get<uiName>(user);\n```\n\n但是对于第一种，我们如果要访问的话，就会较为冗余，其实就是因为限域enum无法进行隐\n式的类型转换\n\n```cpp\nauto val = std::get<static_cast<std::size_t>(UserInfoFields1::uiEmail)>(user)\n```\n\n我们可以实现一个`constexpr`函数，在编译器生效，将其类型转化为`std::size_t`, 但是\n更一般化地，我们可以直接返回这个枚举的底层类型\n\n```cpp\n// std::underlying_type用于获取枚举类型的底层数据类型, 要求枚举已定义\ntemplate <typename E>\nconstexpr typename std::underlying_type<E>::type toUType(\n    E enumerator) noexcept {\n  return static_cast<typename std::underlying_type<E>::type>(enumerator);\n}\n\n// cpp14\ntemplate <typename E>\nconstexpr std::underlying_type_t<E> toUType(E enumerator) noexcept {\n  return static_cast<std::underlying_type_t<E>>(enumerator);\n}\n\n// auto 返回类型推导\ntemplate <typename E>\nconstexpr auto toUType(E enumerator) noexcept {\n  return static_cast<std::underlying_type_t<E>>(enumerator);\n}\n\n// 限域写法\nauto val = std::get<toUType(UserInfoFields::uiEmail)>(uInfo);\n```\n\n## 五. deleted\n\n我们想要将一个函数标记为无法使用，在c++98中会将其标记为`private`, 但是这样存在诸\n多局限性，使用`deleted` 会有更好的效果\n\n- 任何函数都可以标记为`deleted`，而只有成员函数可被标记为`private`\n\n- `deleted` 可以禁止一些模板的实例化\n\n- deleted函数不能以任何方式被调用，即使你在成员函数或者友元函数里面调用deleted函\n  数也不能通过编译。可以在编译期检测出来，而不是链接期\n\n## 六. override/noexcept\n\n由于cpp中的继承重写有诸多限制，所以对于派生类的函数重写，最好加上`override`，便\n于编译器检查, `noexcept`也是同理，可以给我们带来更小的开销，尤其是作用于拷贝移动\n赋值，以及构造析构函数的时候，建议将其声明为 `noexcept`\n\n## 七. constexpr\n\nconstexpr可以将一部分在运行时进行的计算转移到编译时进行，这样会给我们的代码带来\n更快的运行效率，所以我们应当尽可能地在代码中应用constexpr\n\n## 八. const成员函数的线程安全\n\n在cpp中，const成员函数无法修改成员变量，这是const语义保证的，但是经由mutable修饰\n的成员变量，是可以被const成员函数改变的，这样的话，本身const成员函数就肩负着的线\n程安全的逻辑意义，就被破坏，所以我们需要人为的去使用mutex等同步原语来保证const线\n程安全\n\n## 九. 特殊成员函数\n\n特殊成员函数有六个，指的是cpp会自己生成的函数，注意这些函数签名是写死的，不能随\n意更改传入的参数和返回值的type\n\n如果没有显式声明，他们会在需要的时候才会自动生成。","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":2,"title":"一. {} 初始化","slug":"一-初始化","link":"#一-初始化","children":[]},{"level":2,"title":"二. nullptr","slug":"二-nullptr","link":"#二-nullptr","children":[]},{"level":2,"title":"三. using","slug":"三-using","link":"#三-using","children":[]},{"level":2,"title":"四. scoped enum","slug":"四-scoped-enum","link":"#四-scoped-enum","children":[]},{"level":2,"title":"五. deleted","slug":"五-deleted","link":"#五-deleted","children":[]},{"level":2,"title":"六. override/noexcept","slug":"六-override-noexcept","link":"#六-override-noexcept","children":[]},{"level":2,"title":"七. constexpr","slug":"七-constexpr","link":"#七-constexpr","children":[]},{"level":2,"title":"八. const成员函数的线程安全","slug":"八-const成员函数的线程安全","link":"#八-const成员函数的线程安全","children":[]},{"level":2,"title":"九. 特殊成员函数","slug":"九-特殊成员函数","link":"#九-特殊成员函数","children":[]}]}}
